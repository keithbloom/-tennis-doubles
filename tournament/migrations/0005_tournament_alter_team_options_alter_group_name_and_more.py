# Generated by Django 5.1.1 on 2025-01-01 14:45

import django.db.models.deletion
from django.db import migrations, models

def store_group_data(apps, schema_editor):
    Team = apps.get_model('tournament', 'Team')
    # Create a temporary field or table to store the mapping
    # We can use a simple dict for now and store it in the migration state
    group_mappings = {}
    for team in Team.objects.all():
        group_mappings[team.id] = team.group_id
    
    # Store this data somewhere that subsequent migrations can access
    # One way is to store it directly in the database:
    Group = apps.get_model('tournament', 'Group')
    for group in Group.objects.all():
        group.temp_data = True  # Add a marker we can check later
        group.save()

def reverse_group_data(apps, schema_editor):
    Group = apps.get_model('tournament', 'Group')
    Group.objects.filter(temp_data=True).delete()

class Migration(migrations.Migration):

    dependencies = [
        ('tournament', '0004_alter_team_options'),
    ]

    operations = [
        migrations.AddField(
            model_name='group',
            name='temp_data',
            field=models.BooleanField(default=False),
        ),
        migrations.RunPython(store_group_data, reverse_group_data),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('ONGOING', 'Ongoing'), ('COMPLETED', 'Completed')], default='ONGOING', max_length=10)),
            ],
        ),
        migrations.AlterModelOptions(
            name='team',
            options={'ordering': ['tournament_group', 'rank']},
        ),
        migrations.AlterField(
            model_name='group',
            name='name',
            field=models.CharField(max_length=100, unique=True),
        ),
        migrations.AddField(
            model_name='match',
            name='tournament',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='matches', to='tournament.tournament'),
        ),
        migrations.CreateModel(
            name='TournamentGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.group')),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.tournament')),
            ],
            options={
                'unique_together': {('tournament', 'group')},
            },
        ),
        migrations.AddField(
            model_name='tournament',
            name='groups',
            field=models.ManyToManyField(through='tournament.TournamentGroup', to='tournament.group'),
        ),
        migrations.AlterUniqueTogether(
            name='team',
            unique_together=set(),
        ),
        migrations.AddField(
            model_name='team',
            name='tournament_group',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='teams', to='tournament.tournamentgroup'),
        ),
        migrations.AlterUniqueTogether(
            name='team',
            unique_together={('player1', 'player2', 'tournament_group')},
        ),
        migrations.RemoveField(
            model_name='team',
            name='group',
        )
    ]
