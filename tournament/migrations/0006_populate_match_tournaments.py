# Generated by Django 5.1.1 on 2025-01-01 14:45
from django.db import migrations

from django.db import migrations

def link_matches_to_tournament(apps, schema_editor):
    Tournament = apps.get_model('tournament', 'Tournament')
    Group = apps.get_model('tournament', 'Group')
    Team = apps.get_model('tournament', 'Team')
    TournamentGroup = apps.get_model('tournament', 'TournamentGroup')
    Match = apps.get_model('tournament', 'Match')
    
    # Create default tournament
    default_tournament, _ = Tournament.objects.get_or_create(
        name="Legacy Tournament",
        defaults={
            'start_date': '2024-01-01',
            'status': 'ONGOING'
        }
    )
    
    # Get all groups marked with temp_data
    old_groups = Group.objects.filter(temp_data=True)
    
    # Create new groups and tournament groups
    group_mapping = {}
    
    for old_group in old_groups:
        # Create or get new standalone group
        new_group, _ = Group.objects.get_or_create(
            name=old_group.name
        )
        
        # Create or get tournament group
        tournament_group, _ = TournamentGroup.objects.get_or_create(
            tournament=default_tournament,
            group=new_group
        )
        
        group_mapping[old_group.id] = tournament_group
    
    # Update teams based on the stored mapping
    for team in Team.objects.all():
        old_group = Group.objects.filter(temp_data=True).first()  # Get any old group data
        if old_group and old_group.id in group_mapping:
            team.tournament_group = group_mapping[old_group.id]
            team.save()
    
    # Update matches
    Match.objects.all().update(tournament=default_tournament)
    
    # Clean up temporary data
    Group.objects.filter(temp_data=True).update(temp_data=False)

def reverse_migration(apps, schema_editor):
    Tournament = apps.get_model('tournament', 'Tournament')
    TournamentGroup = apps.get_model('tournament', 'TournamentGroup')
    Match = apps.get_model('tournament', 'Match')
    
    Match.objects.all().update(tournament=None)
    TournamentGroup.objects.all().delete()
    Tournament.objects.all().delete()
class Migration(migrations.Migration):
    dependencies = [
        ('tournament', '0005_tournament_alter_team_options_alter_group_name_and_more'),
    ]

    operations = [
        migrations.RunPython(link_matches_to_tournament, reverse_migration),
    ]