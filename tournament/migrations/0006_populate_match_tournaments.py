# Generated by Django 5.1.1 on 2025-01-01 14:45
from django.db import migrations
import json

def link_matches_to_tournament(apps, schema_editor):
    Tournament = apps.get_model('tournament', 'Tournament')
    Group = apps.get_model('tournament', 'Group')
    Team = apps.get_model('tournament', 'Team')
    TournamentGroup = apps.get_model('tournament', 'TournamentGroup')
    Match = apps.get_model('tournament', 'Match')
    GroupMapping = apps.get_model('tournament', 'GroupMapping')
    
    # Get the stored mappings
    stored_mappings = GroupMapping.objects.first()
    if stored_mappings:
        team_to_group = json.loads(stored_mappings.mapping_data)
    else:
        team_to_group = {}
    
    # Create default tournament
    default_tournament, _ = Tournament.objects.get_or_create(
        name="Winter 2024",
        defaults={
            'start_date': '2024-09-02',
            'status': 'ONGOING'
        }
    )
    
    # Create new groups and tournament groups
    group_mapping = {}  # Will map group names to tournament groups
    
    # Get unique group names from our stored mappings
    unique_group_names = set(team_to_group.values())
    
    for group_name in unique_group_names:
        # Create or get new standalone group
        new_group, _ = Group.objects.get_or_create(
            name=group_name
        )
        
        # Create or get tournament group
        tournament_group, _ = TournamentGroup.objects.get_or_create(
            tournament=default_tournament,
            group=new_group
        )
        
        # Map group name to tournament group
        group_mapping[group_name] = tournament_group
    
    # Update teams using the stored mappings
    for team_id, group_name in team_to_group.items():
        if group_name in group_mapping:
            Team.objects.filter(id=team_id).update(
                tournament_group=group_mapping[group_name]
            )
    
    # Update matches
    Match.objects.all().update(tournament=default_tournament)

def reverse_migration(apps, schema_editor):
    Tournament = apps.get_model('tournament', 'Tournament')
    TournamentGroup = apps.get_model('tournament', 'TournamentGroup')
    Group = apps.get_model('tournament', 'Group')
    Match = apps.get_model('tournament', 'Match')
    
    Match.objects.all().update(tournament=None)
    TournamentGroup.objects.all().delete()
    Tournament.objects.all().delete()

class Migration(migrations.Migration):
    dependencies = [
        ('tournament', '0005_tournament_alter_team_options_alter_group_name_and_more'),
    ]

    operations = [
        migrations.RunPython(link_matches_to_tournament, reverse_migration),
    ]